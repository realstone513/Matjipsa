Index: src/main/java/com/example/loginDemo/auth/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.loginDemo.auth;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Service;\n\nimport java.security.Key;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${security.secret.key}\")\n    private String secret_key;\n\n    public String extractUsername(String token) {\n        return extractClaim(token, Claims::getSubject);\n    }\n\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    public String generateAccessToken(UserDetails userDetails) {\n        return generateAccessToken(new HashMap<>(), userDetails);\n    }\n\n    public String generateAccessToken(\n            Map<String, Object> extraClaims,\n            UserDetails userDetails\n    ){\n        return Jwts\n                .builder()\n                .setClaims(extraClaims)\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date(System.currentTimeMillis())) // 토큰 발행 시간\n                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 토큰 만료 시간\n                .signWith(getSignInKey(), SignatureAlgorithm.HS256) // 토큰 알고리즘\n                .compact();\n    }\n\n//    public String generateRefreshToken(\n//            Map<String, Object> extraClaims,\n//            UserDetails userDetails\n//    ) {\n//        return Jwts\n//                .builder()\n//                .setClaims(extraClaims)\n//                .setSubject(userDetails.getUsername())\n//                .setIssuedAt(new Date(System.currentTimeMillis())) // 토큰 발행 시간\n//                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 7)) // 토큰 만료 시간 (7일)\n//                .signWith(getSignInKey(), SignatureAlgorithm.HS256) // 토큰 알고리즘\n//                .compact();\n//    }\n\n\n    public boolean isTokenValid(String token, UserDetails userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);\n    }\n\n    private boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    private Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(getSignInKey())\n                .build()\n                .parseClaimsJws(token)\n                .getBody();\n    }\n\n    private Key getSignInKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(secret_key);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/loginDemo/auth/JwtService.java b/src/main/java/com/example/loginDemo/auth/JwtService.java
--- a/src/main/java/com/example/loginDemo/auth/JwtService.java	(revision f0df257d42a3110ed91f998af3543dd191ad01e0)
+++ b/src/main/java/com/example/loginDemo/auth/JwtService.java	(date 1731026785451)
@@ -43,7 +43,7 @@
                 .setClaims(extraClaims)
                 .setSubject(userDetails.getUsername())
                 .setIssuedAt(new Date(System.currentTimeMillis())) // 토큰 발행 시간
-                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 토큰 만료 시간
+                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 5)) // 토큰 만료 시간
                 .signWith(getSignInKey(), SignatureAlgorithm.HS256) // 토큰 알고리즘
                 .compact();
     }
